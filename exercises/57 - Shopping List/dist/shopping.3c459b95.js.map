{"version":3,"sources":["shopping.js"],"names":["shoppingForm","document","querySelector","list","items","handleSubmit","e","preventDefault","name","currentTarget","item","value","id","Date","now","complete","push","reset","dispatchEvent","CustomEvent","displayItems","html","map","join","innerHTML","mirrorToLocalStorage","console","info","localStorage","setItem","JSON","stringify","restoreFromLocalStorage","lsItems","parse","getItem","length","deleteItem","log","filter","markAsComplete","itemRef","find","addEventListener","parseInt","target","matches"],"mappings":"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","file":"shopping.3c459b95.js","sourceRoot":"..","sourcesContent":["const shoppingForm = document.querySelector('.shopping');\nconst list = document.querySelector('.list');\n\n// we need an array to hold our state\nlet items = [];\n\n// listen to submit event on form to add item added\nfunction handleSubmit(e) {\n  e.preventDefault();\n  const name = e.currentTarget.item.value; // grab the value the user typed\n  // if input field is left blank, don't submit\n  if (!name) return;\n\n  const item = {\n    name,\n    id: Date.now(),\n    complete: false,\n  };\n  // add the value to our state\n  items.push(item);\n  // clear out anything left in the form input\n  //   e.currentTarget.item.value = '';\n  e.currentTarget.reset();\n  // fire off a custom event to tell anyone that cares that the items have been updated\n  list.dispatchEvent(new CustomEvent('itemsUpdated')); // running this dispatchEvent and creating a new custom event helps keep concerns seperate\n}\n\nfunction displayItems() {\n  const html = items\n    .map(\n      item => `<li class=\"shopping-item\">\n      <input \n        value=\"${item.id}\" \n        type=\"checkbox\"\n        ${item.complete ? 'checked' : ''}\n        >\n      <span class=\"itemName\">${item.name}</span>\n      <button \n        aria-label=\"Remove ${item.name}\"\n        value=\"${item.id}\"\n        >&times;</button>\n    </li>`\n    )\n    .join('');\n  list.innerHTML = html;\n}\n\n// save items into local storage\nfunction mirrorToLocalStorage() {\n  console.info('saving items to local storage');\n  localStorage.setItem('items', JSON.stringify(items));\n}\n\n// when page is refreshed/reloaded, local storage items are pulled out and shown\nfunction restoreFromLocalStorage() {\n  console.info('restoring from local storage');\n  // pull items from local storage\n  const lsItems = JSON.parse(localStorage.getItem('items'));\n  if (lsItems.length) {\n    // lsItems.length checks to see if there are any items at all..if so...\n    items.push(...lsItems); // if any exist, spread them into our items array.\n    list.dispatchEvent(new CustomEvent('itemsUpdated'));\n  }\n}\n\nfunction deleteItem(id) {\n  console.log('deleting this item', id);\n  // update our items array without this one\n  items = items.filter(item => item.id !== id);\n  list.dispatchEvent(new CustomEvent('itemsUpdated'));\n}\n\nfunction markAsComplete(id) {\n  console.log('marking as complete', id);\n  const itemRef = items.find(item => item.id === id);\n  itemRef.complete = !itemRef.complete;\n  list.dispatchEvent(new CustomEvent('itemsUpdated'));\n}\n\nshoppingForm.addEventListener('submit', handleSubmit);\nlist.addEventListener('itemsUpdated', displayItems); // listen for itemsUpdated, and then run displayItems ðŸŽ‰\nlist.addEventListener('itemsUpdated', mirrorToLocalStorage);\n// event delegation: we listen for the click on the list <ul> but then delegate the click over to the button if that is what was clicked\nlist.addEventListener('click', function(e) {\n  const id = parseInt(e.target.value);\n  if (e.target.matches('button')) {\n    deleteItem(id);\n  }\n  if (e.target.matches('input[type=\"checkbox\"]')) {\n    markAsComplete(id);\n  }\n});\n\nrestoreFromLocalStorage();\n"]}